/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { KullaniciService } from "../kullanici.service";
import { KullaniciCreateInput } from "./KullaniciCreateInput";
import { Kullanici } from "./Kullanici";
import { KullaniciFindManyArgs } from "./KullaniciFindManyArgs";
import { KullaniciWhereUniqueInput } from "./KullaniciWhereUniqueInput";
import { KullaniciUpdateInput } from "./KullaniciUpdateInput";

export class KullaniciControllerBase {
  constructor(protected readonly service: KullaniciService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Kullanici })
  async createKullanici(
    @common.Body() data: KullaniciCreateInput
  ): Promise<Kullanici> {
    return await this.service.createKullanici({
      data: data,
      select: {
        ad: true,
        biyografi: true,
        createdAt: true,
        ePosta: true,
        id: true,
        soyad: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Kullanici] })
  @ApiNestedQuery(KullaniciFindManyArgs)
  async kullanicis(@common.Req() request: Request): Promise<Kullanici[]> {
    const args = plainToClass(KullaniciFindManyArgs, request.query);
    return this.service.kullanicis({
      ...args,
      select: {
        ad: true,
        biyografi: true,
        createdAt: true,
        ePosta: true,
        id: true,
        soyad: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Kullanici })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async kullanici(
    @common.Param() params: KullaniciWhereUniqueInput
  ): Promise<Kullanici | null> {
    const result = await this.service.kullanici({
      where: params,
      select: {
        ad: true,
        biyografi: true,
        createdAt: true,
        ePosta: true,
        id: true,
        soyad: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Kullanici })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateKullanici(
    @common.Param() params: KullaniciWhereUniqueInput,
    @common.Body() data: KullaniciUpdateInput
  ): Promise<Kullanici | null> {
    try {
      return await this.service.updateKullanici({
        where: params,
        data: data,
        select: {
          ad: true,
          biyografi: true,
          createdAt: true,
          ePosta: true,
          id: true,
          soyad: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Kullanici })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteKullanici(
    @common.Param() params: KullaniciWhereUniqueInput
  ): Promise<Kullanici | null> {
    try {
      return await this.service.deleteKullanici({
        where: params,
        select: {
          ad: true,
          biyografi: true,
          createdAt: true,
          ePosta: true,
          id: true,
          soyad: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
