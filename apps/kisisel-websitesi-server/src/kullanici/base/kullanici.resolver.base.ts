/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Kullanici } from "./Kullanici";
import { KullaniciCountArgs } from "./KullaniciCountArgs";
import { KullaniciFindManyArgs } from "./KullaniciFindManyArgs";
import { KullaniciFindUniqueArgs } from "./KullaniciFindUniqueArgs";
import { CreateKullaniciArgs } from "./CreateKullaniciArgs";
import { UpdateKullaniciArgs } from "./UpdateKullaniciArgs";
import { DeleteKullaniciArgs } from "./DeleteKullaniciArgs";
import { KullaniciService } from "../kullanici.service";
@graphql.Resolver(() => Kullanici)
export class KullaniciResolverBase {
  constructor(protected readonly service: KullaniciService) {}

  async _kullanicisMeta(
    @graphql.Args() args: KullaniciCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Kullanici])
  async kullanicis(
    @graphql.Args() args: KullaniciFindManyArgs
  ): Promise<Kullanici[]> {
    return this.service.kullanicis(args);
  }

  @graphql.Query(() => Kullanici, { nullable: true })
  async kullanici(
    @graphql.Args() args: KullaniciFindUniqueArgs
  ): Promise<Kullanici | null> {
    const result = await this.service.kullanici(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Kullanici)
  async createKullanici(
    @graphql.Args() args: CreateKullaniciArgs
  ): Promise<Kullanici> {
    return await this.service.createKullanici({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Kullanici)
  async updateKullanici(
    @graphql.Args() args: UpdateKullaniciArgs
  ): Promise<Kullanici | null> {
    try {
      return await this.service.updateKullanici({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Kullanici)
  async deleteKullanici(
    @graphql.Args() args: DeleteKullaniciArgs
  ): Promise<Kullanici | null> {
    try {
      return await this.service.deleteKullanici(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
