/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { YetenekService } from "../yetenek.service";
import { YetenekCreateInput } from "./YetenekCreateInput";
import { Yetenek } from "./Yetenek";
import { YetenekFindManyArgs } from "./YetenekFindManyArgs";
import { YetenekWhereUniqueInput } from "./YetenekWhereUniqueInput";
import { YetenekUpdateInput } from "./YetenekUpdateInput";

export class YetenekControllerBase {
  constructor(protected readonly service: YetenekService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Yetenek })
  async createYetenek(
    @common.Body() data: YetenekCreateInput
  ): Promise<Yetenek> {
    return await this.service.createYetenek({
      data: data,
      select: {
        ad: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        uzmanlikDuzeyi: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Yetenek] })
  @ApiNestedQuery(YetenekFindManyArgs)
  async yeteneks(@common.Req() request: Request): Promise<Yetenek[]> {
    const args = plainToClass(YetenekFindManyArgs, request.query);
    return this.service.yeteneks({
      ...args,
      select: {
        ad: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        uzmanlikDuzeyi: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Yetenek })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async yetenek(
    @common.Param() params: YetenekWhereUniqueInput
  ): Promise<Yetenek | null> {
    const result = await this.service.yetenek({
      where: params,
      select: {
        ad: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        uzmanlikDuzeyi: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Yetenek })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateYetenek(
    @common.Param() params: YetenekWhereUniqueInput,
    @common.Body() data: YetenekUpdateInput
  ): Promise<Yetenek | null> {
    try {
      return await this.service.updateYetenek({
        where: params,
        data: data,
        select: {
          ad: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          uzmanlikDuzeyi: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Yetenek })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteYetenek(
    @common.Param() params: YetenekWhereUniqueInput
  ): Promise<Yetenek | null> {
    try {
      return await this.service.deleteYetenek({
        where: params,
        select: {
          ad: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          uzmanlikDuzeyi: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
