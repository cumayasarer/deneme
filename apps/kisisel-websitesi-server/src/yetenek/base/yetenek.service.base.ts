/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Yetenek as PrismaYetenek } from "@prisma/client";

export class YetenekServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.YetenekCountArgs, "select">): Promise<number> {
    return this.prisma.yetenek.count(args);
  }

  async yeteneks<T extends Prisma.YetenekFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.YetenekFindManyArgs>
  ): Promise<PrismaYetenek[]> {
    return this.prisma.yetenek.findMany<Prisma.YetenekFindManyArgs>(args);
  }
  async yetenek<T extends Prisma.YetenekFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.YetenekFindUniqueArgs>
  ): Promise<PrismaYetenek | null> {
    return this.prisma.yetenek.findUnique(args);
  }
  async createYetenek<T extends Prisma.YetenekCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.YetenekCreateArgs>
  ): Promise<PrismaYetenek> {
    return this.prisma.yetenek.create<T>(args);
  }
  async updateYetenek<T extends Prisma.YetenekUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.YetenekUpdateArgs>
  ): Promise<PrismaYetenek> {
    return this.prisma.yetenek.update<T>(args);
  }
  async deleteYetenek<T extends Prisma.YetenekDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.YetenekDeleteArgs>
  ): Promise<PrismaYetenek> {
    return this.prisma.yetenek.delete(args);
  }
}
