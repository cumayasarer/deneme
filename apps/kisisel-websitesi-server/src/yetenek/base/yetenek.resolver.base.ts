/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Yetenek } from "./Yetenek";
import { YetenekCountArgs } from "./YetenekCountArgs";
import { YetenekFindManyArgs } from "./YetenekFindManyArgs";
import { YetenekFindUniqueArgs } from "./YetenekFindUniqueArgs";
import { CreateYetenekArgs } from "./CreateYetenekArgs";
import { UpdateYetenekArgs } from "./UpdateYetenekArgs";
import { DeleteYetenekArgs } from "./DeleteYetenekArgs";
import { YetenekService } from "../yetenek.service";
@graphql.Resolver(() => Yetenek)
export class YetenekResolverBase {
  constructor(protected readonly service: YetenekService) {}

  async _yeteneksMeta(
    @graphql.Args() args: YetenekCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Yetenek])
  async yeteneks(
    @graphql.Args() args: YetenekFindManyArgs
  ): Promise<Yetenek[]> {
    return this.service.yeteneks(args);
  }

  @graphql.Query(() => Yetenek, { nullable: true })
  async yetenek(
    @graphql.Args() args: YetenekFindUniqueArgs
  ): Promise<Yetenek | null> {
    const result = await this.service.yetenek(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Yetenek)
  async createYetenek(
    @graphql.Args() args: CreateYetenekArgs
  ): Promise<Yetenek> {
    return await this.service.createYetenek({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Yetenek)
  async updateYetenek(
    @graphql.Args() args: UpdateYetenekArgs
  ): Promise<Yetenek | null> {
    try {
      return await this.service.updateYetenek({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Yetenek)
  async deleteYetenek(
    @graphql.Args() args: DeleteYetenekArgs
  ): Promise<Yetenek | null> {
    try {
      return await this.service.deleteYetenek(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
