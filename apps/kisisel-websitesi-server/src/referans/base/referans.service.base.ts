/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Referans as PrismaReferans } from "@prisma/client";

export class ReferansServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReferansCountArgs, "select">): Promise<number> {
    return this.prisma.referans.count(args);
  }

  async referansItems<T extends Prisma.ReferansFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReferansFindManyArgs>
  ): Promise<PrismaReferans[]> {
    return this.prisma.referans.findMany<Prisma.ReferansFindManyArgs>(args);
  }
  async referans<T extends Prisma.ReferansFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReferansFindUniqueArgs>
  ): Promise<PrismaReferans | null> {
    return this.prisma.referans.findUnique(args);
  }
  async createReferans<T extends Prisma.ReferansCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReferansCreateArgs>
  ): Promise<PrismaReferans> {
    return this.prisma.referans.create<T>(args);
  }
  async updateReferans<T extends Prisma.ReferansUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReferansUpdateArgs>
  ): Promise<PrismaReferans> {
    return this.prisma.referans.update<T>(args);
  }
  async deleteReferans<T extends Prisma.ReferansDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReferansDeleteArgs>
  ): Promise<PrismaReferans> {
    return this.prisma.referans.delete(args);
  }
}
