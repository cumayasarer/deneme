/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReferansService } from "../referans.service";
import { ReferansCreateInput } from "./ReferansCreateInput";
import { Referans } from "./Referans";
import { ReferansFindManyArgs } from "./ReferansFindManyArgs";
import { ReferansWhereUniqueInput } from "./ReferansWhereUniqueInput";
import { ReferansUpdateInput } from "./ReferansUpdateInput";

export class ReferansControllerBase {
  constructor(protected readonly service: ReferansService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Referans })
  async createReferans(
    @common.Body() data: ReferansCreateInput
  ): Promise<Referans> {
    return await this.service.createReferans({
      data: data,
      select: {
        aciklama: true,
        ad: true,
        createdAt: true,
        firma: true,
        id: true,
        pozisyon: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Referans] })
  @ApiNestedQuery(ReferansFindManyArgs)
  async referansItems(@common.Req() request: Request): Promise<Referans[]> {
    const args = plainToClass(ReferansFindManyArgs, request.query);
    return this.service.referansItems({
      ...args,
      select: {
        aciklama: true,
        ad: true,
        createdAt: true,
        firma: true,
        id: true,
        pozisyon: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Referans })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async referans(
    @common.Param() params: ReferansWhereUniqueInput
  ): Promise<Referans | null> {
    const result = await this.service.referans({
      where: params,
      select: {
        aciklama: true,
        ad: true,
        createdAt: true,
        firma: true,
        id: true,
        pozisyon: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Referans })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReferans(
    @common.Param() params: ReferansWhereUniqueInput,
    @common.Body() data: ReferansUpdateInput
  ): Promise<Referans | null> {
    try {
      return await this.service.updateReferans({
        where: params,
        data: data,
        select: {
          aciklama: true,
          ad: true,
          createdAt: true,
          firma: true,
          id: true,
          pozisyon: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Referans })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReferans(
    @common.Param() params: ReferansWhereUniqueInput
  ): Promise<Referans | null> {
    try {
      return await this.service.deleteReferans({
        where: params,
        select: {
          aciklama: true,
          ad: true,
          createdAt: true,
          firma: true,
          id: true,
          pozisyon: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
