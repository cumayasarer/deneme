/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Referans } from "./Referans";
import { ReferansCountArgs } from "./ReferansCountArgs";
import { ReferansFindManyArgs } from "./ReferansFindManyArgs";
import { ReferansFindUniqueArgs } from "./ReferansFindUniqueArgs";
import { CreateReferansArgs } from "./CreateReferansArgs";
import { UpdateReferansArgs } from "./UpdateReferansArgs";
import { DeleteReferansArgs } from "./DeleteReferansArgs";
import { ReferansService } from "../referans.service";
@graphql.Resolver(() => Referans)
export class ReferansResolverBase {
  constructor(protected readonly service: ReferansService) {}

  async _referansItemsMeta(
    @graphql.Args() args: ReferansCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Referans])
  async referansItems(
    @graphql.Args() args: ReferansFindManyArgs
  ): Promise<Referans[]> {
    return this.service.referansItems(args);
  }

  @graphql.Query(() => Referans, { nullable: true })
  async referans(
    @graphql.Args() args: ReferansFindUniqueArgs
  ): Promise<Referans | null> {
    const result = await this.service.referans(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Referans)
  async createReferans(
    @graphql.Args() args: CreateReferansArgs
  ): Promise<Referans> {
    return await this.service.createReferans({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Referans)
  async updateReferans(
    @graphql.Args() args: UpdateReferansArgs
  ): Promise<Referans | null> {
    try {
      return await this.service.updateReferans({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Referans)
  async deleteReferans(
    @graphql.Args() args: DeleteReferansArgs
  ): Promise<Referans | null> {
    try {
      return await this.service.deleteReferans(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
