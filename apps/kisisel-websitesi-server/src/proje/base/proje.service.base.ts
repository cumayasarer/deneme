/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Proje as PrismaProje } from "@prisma/client";

export class ProjeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProjeCountArgs, "select">): Promise<number> {
    return this.prisma.proje.count(args);
  }

  async projes<T extends Prisma.ProjeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjeFindManyArgs>
  ): Promise<PrismaProje[]> {
    return this.prisma.proje.findMany<Prisma.ProjeFindManyArgs>(args);
  }
  async proje<T extends Prisma.ProjeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjeFindUniqueArgs>
  ): Promise<PrismaProje | null> {
    return this.prisma.proje.findUnique(args);
  }
  async createProje<T extends Prisma.ProjeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjeCreateArgs>
  ): Promise<PrismaProje> {
    return this.prisma.proje.create<T>(args);
  }
  async updateProje<T extends Prisma.ProjeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjeUpdateArgs>
  ): Promise<PrismaProje> {
    return this.prisma.proje.update<T>(args);
  }
  async deleteProje<T extends Prisma.ProjeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjeDeleteArgs>
  ): Promise<PrismaProje> {
    return this.prisma.proje.delete(args);
  }
}
