/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjeService } from "../proje.service";
import { ProjeCreateInput } from "./ProjeCreateInput";
import { Proje } from "./Proje";
import { ProjeFindManyArgs } from "./ProjeFindManyArgs";
import { ProjeWhereUniqueInput } from "./ProjeWhereUniqueInput";
import { ProjeUpdateInput } from "./ProjeUpdateInput";

export class ProjeControllerBase {
  constructor(protected readonly service: ProjeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Proje })
  async createProje(@common.Body() data: ProjeCreateInput): Promise<Proje> {
    return await this.service.createProje({
      data: data,
      select: {
        aciklama: true,
        baslangicTarihi: true,
        baslik: true,
        bitisTarihi: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Proje] })
  @ApiNestedQuery(ProjeFindManyArgs)
  async projes(@common.Req() request: Request): Promise<Proje[]> {
    const args = plainToClass(ProjeFindManyArgs, request.query);
    return this.service.projes({
      ...args,
      select: {
        aciklama: true,
        baslangicTarihi: true,
        baslik: true,
        bitisTarihi: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Proje })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async proje(
    @common.Param() params: ProjeWhereUniqueInput
  ): Promise<Proje | null> {
    const result = await this.service.proje({
      where: params,
      select: {
        aciklama: true,
        baslangicTarihi: true,
        baslik: true,
        bitisTarihi: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Proje })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProje(
    @common.Param() params: ProjeWhereUniqueInput,
    @common.Body() data: ProjeUpdateInput
  ): Promise<Proje | null> {
    try {
      return await this.service.updateProje({
        where: params,
        data: data,
        select: {
          aciklama: true,
          baslangicTarihi: true,
          baslik: true,
          bitisTarihi: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Proje })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProje(
    @common.Param() params: ProjeWhereUniqueInput
  ): Promise<Proje | null> {
    try {
      return await this.service.deleteProje({
        where: params,
        select: {
          aciklama: true,
          baslangicTarihi: true,
          baslik: true,
          bitisTarihi: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
